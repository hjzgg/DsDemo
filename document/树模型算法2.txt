/*
	思路：根据当前二叉树的层次计算出对应的满二叉树。首先确定满二叉树根节点的位置，递归确定出孩子节点的位置
*/
private SegmentTreeNode root = null;
private int treeLevel = 0;
private SegmentTreeNode buildSegmentTree(String[] datas, int ld, int rd, int level){
	if(ld > rd) return null;
	if(ld == rd){
		if(treeLevel < level) treeLevel = level;
		SegmentTreeNode node = new SegmentTreeNode(datas[ld], ld, rd);
		return node;
	} else {
		int mid = (ld+rd)>>1;
		SegmentTreeNode node = new SegmentTreeNode(null, ld, rd);
		node.lchild = buildSegmentTree(datas, ld, mid, level+1);
		node.rchild = buildSegmentTree(datas, mid+1, rd, level+1);
		int x;
		if(maxOrMin)
			x = Math.max(Integer.valueOf(node.lchild.content), Integer.valueOf(node.rchild.content));
		else 
			x = Math.min(Integer.valueOf(node.lchild.content), Integer.valueOf(node.rchild.content));
		node.content = String.valueOf(x);
		return node;
	}
}

private void graphicOfSegmentTree(SegmentTreeNode root, int leftMargin, int topMargin, int level){
	if(root == null) return;
	DsSegTreeRect shape = new DsSegTreeRect(leftMargin, topMargin, ShapeSize.SegmentTreeModel.NODE_WIDTH, ShapeSize.SegmentTreeModel.NODE_HEIGHT, root.content, "["+String.valueOf(root.ld) + "," + String.valueOf(root.rd) + "]");
	root.shape = shape;
	shapeList.add(shape);
	int offDist = ((int)(Math.pow(2.0, (double)(level-1))+0.5)*(ShapeSize.SegmentTreeModel.NODE_WIDTH+ShapeSize.SegmentTreeModel.NODES_HOR_DIST)/2);
	graphicOfSegmentTree(root.lchild, leftMargin-offDist, topMargin+ShapeSize.SegmentTreeModel.NODE_HEIGHT+ShapeSize.SegmentTreeModel.LEVEL_DIST, level-1);
	graphicOfSegmentTree(root.rchild, leftMargin+offDist, topMargin+ShapeSize.SegmentTreeModel.NODE_HEIGHT+ShapeSize.SegmentTreeModel.LEVEL_DIST, level-1);
	
	if(root.lchild != null){
		DsLine line = new DsLine(root.shape.lx+root.shape.lw/2, root.shape.ly+root.shape.lh, root.lchild.shape.lx+root.lchild.shape.lw/2, root.lchild.shape.ly, false);
		shapeList.add(line);
	}
	
	if(root.rchild != null){
		DsLine line = new DsLine(root.shape.lx+root.shape.lw/2, root.shape.ly+root.shape.lh, root.rchild.shape.lx+root.rchild.shape.lw/2, root.rchild.shape.ly, false);
		shapeList.add(line);
	}
}

public void createSegmentTreeData(String data){
	String[] datas = data.split(" ");
	root = buildSegmentTree(datas, 0, datas.length-1, 1);
	//(leftMargin, topMargin)是二叉树根节点的坐标位置
	int leftMargin = ((int)(Math.pow(2.0, (double)(treeLevel-1))+0.5)-1)*(ShapeSize.SegmentTreeModel.NODE_WIDTH+ShapeSize.SegmentTreeModel.NODES_HOR_DIST)/2 + ShapeSize.SegmentTreeModel.LEFT_MARGIN;
	int topMargin = ShapeSize.SegmentTreeModel.TOP_MARGIN;
	graphicOfSegmentTree(root, leftMargin, topMargin, treeLevel-1);
}